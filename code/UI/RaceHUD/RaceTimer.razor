@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Bydrive
@attribute [Icon("timer")]

@if (Race == null)
	return;

<root class="@GetClasses()">
	<div>
		<label class="title">Time</label>
		<label class="time">@GetRaceTime().FormatAsRaceTime()</label>
	</div>
	<div>
		<label class="title">Lap</label>
		<label class="time">@GetLapTime().FormatAsRaceTime()</label>
	</div>
</root>

@code
	{
		private bool TimeTrial => Race?.IsTimeTrial == true;

		private float GetRaceTime()
		{
			if (Race == null || !Race.HasStarted)
				return 0f;

			var participant = GetLocalParticipantInstance();
			if(Race.IsFinished(participant))
			{
				return Race.GetParticipantFinish(participant).Time;
			}

			return Race.TimeSinceRaceStart;
		}

		private float GetLapTime()
		{
			if (Race == null || !Race.HasStarted)
				return 0f;

			RaceParticipant participant = GetLocalParticipantInstance();
			if (Race.IsFinished(participant))
			{
				return Race.GetParticipantFinish(participant).LapTimes.LastOrDefault();
			}
			else if(!Race.ParticipantLapTimes.ContainsKey(participant))
			{
				return Race.TimeSinceRaceStart;
			}

			return Race.TimeSinceRaceStart - Race.ParticipantLapTimes[participant].LastOrDefault();
	}

	private string GetClasses()
	{
		string classes = "";
		if(Race.IsTimeTrial)
		{
			classes += "timetrial ";
		}

		return classes;
	}
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Race?.HasStarted, Time.Now );
}