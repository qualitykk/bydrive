@using Sandbox.UI;
@using System.Collections.Generic;
@inherits PanelComponent
@namespace Bydrive

@if (!ShouldDraw())
	return;

<root>
	<div class="title">Results</div>
	<div class="list">
		@if(Race.IsTimeTrial)
		{
			@foreach (var result in GetPlacements())
			{
				<div class="times entry">
					<div class="racer">
						<label class="name">@result.Participant.DisplayName</label>
						<label class="time">@result.Time.FormatAsRaceTime()</label>
					</div>
					<div class="laps">
						@for (int i = 0; i < result.LapTimes.Count; i++)
						{
							<div class="row">
								<label class="number">Lap @(i+1)</label>
								<label class="time">@result.LapTimes[i].FormatAsRaceTime()</label>
							</div>
						}
					</div>
				</div>
			}
			
			@if(GetPreviousData() != null && GetPreviousData().Any())
			{
				<label class="header">Previous Times</label>
				@for(int i = 0; i < MathF.Min(GetPreviousData().Count,3); i++)
				{
					<div class="racer entry" style="height: 6vh;">
						<label class="name @GetPlacementTag(i+1)">@GetPreviousData().OrderBy(p => p.TotalTime).ElementAt(i).PlayerName</label>
						<label class="time">@GetPreviousData().OrderBy(p => p.TotalTime).ElementAt(i).TotalTime.FormatAsRaceTime()</label>
					</div>
				}
			}
		}
		else if (GetPlacements() != null)
		{
			@foreach (var result in GetPlacements())
			{
				<div class="entry racer">
					<label class="placement @GetPlacementTag(result.Placement)">@result.Placement</label>
					<label class="name">@result.Participant.DisplayName</label>
					<label class="time">@result.Time.FormatAsRaceTime()</label>
				</div>
			}
		}
		
	</div>
	<div class="footer">
		<div class="button" @onclick=@OnClickNext>Back to Menu</div>
		@if (Race.IsTimeTrial)
		{
			<div class="button @UI.ActiveIf(!hasSaved)" @onclick=@OnClickSave>Save Time</div>
		}
	</div>
</root>

@code
{
	private bool ShouldDraw()
	{
		return Race != null && Race.IsFinished(GetLocalParticipantInstance());
	}

	private IReadOnlyList<RaceManager.ParticipantFinishInformation> GetPlacements()
	{
		//return Race.Participants
		return Race?.FinishedParticipants ?? default;
	}

	private string GetPlacementTag(int placement)
	{
		int lastPlace = Race?.LastPlace ?? 1;

		return placement switch
		{
			1 => "first",
			2 => "second",
			3 => "third",
			int p when p == lastPlace => "last",
			_ => "middle",
		};
	}

	private List<TimeTrialData> GetPreviousData()
	{
		return TimeTrialData.ReadForTrack(RaceContext.Definition.ResourcePath);
	}

	private void OnClickNext()
	{
		RaceContext.Stop();
	}

	bool hasSaved = false;

	private void OnClickSave()
	{
		if (hasSaved)
			return;

		string track = RaceContext.Definition.ResourcePath;
		List<float> lapTimes = Race.GetParticipantFinish(GetLocalParticipantInstance()).LapTimes;
		float totalTime = lapTimes.Sum();

		var existingData = TimeTrialData.ReadForTrack(track);
		if (existingData == default || !existingData.Any(d => d?.TotalTime < totalTime))
		{
			TimeTrialData data = new(GetLocalName(), track, lapTimes);
			TimeTrialData.WriteNew(data);
		}

		hasSaved = true;
	}

	protected override int BuildHash() => HashCode.Combine(GetPlacements(), GetPlacements().Count, ShouldDraw());
}